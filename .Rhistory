print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
rest = rowSums(select(mod1,-1, -R1))
case = mod1 %>% select(R1)
df[R] = mod1[,c(1,..R1)]
df[R] = mod1[,c(1,R1)]
mod1[,c(1,R1)]
mod1[,c(1,..R1)]
df[[R1]] = mod1[,c(1,R1)]
mod1 = mod1 %>% filter(!(case > 0 & rest == 0))
#' @export
#' @import igraph
mod1 = x
mod2 = x2
#' @export
#' @import igraph
mod1 = x
mod2 = x2
mod2 = mod2 %>% arrange(pVal_f) %>% select(virus) %>% unlist %>% as.character()
mod1 = mod1[[3]] %>% select(1,mod2)
df = list()
for(R1 in 2:3){
for(R2 in 3:dim(mod1)[2]){
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
rest = rowSums(select(mod1,-1, -R1))
case = mod1 %>% select(R1)
df[[R1]] = mod1[,c(1,R1)]
mod1 = mod1 %>% filter(!(case > 0 & rest == 0))
}
for(R1 in 2:3){
for(R2 in R1+1:dim(mod1)[2]){
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
rest = rowSums(select(mod1,-1, -R1))
case = mod1 %>% select(R1)
df[[R1]] = mod1[,c(1,R1)]
mod1 = mod1 %>% filter(!(case > 0 & rest == 0))
}
View(mod1)
R1+1:dim(mod1)[2]
dim(mod1)[2]
(R1+1):dim(mod1)[2]
df = list()
for(R1 in 2:3){
for(R2 in (R1+1):dim(mod1)[2]){
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
rest = rowSums(select(mod1,-1, -R1))
case = mod1 %>% select(R1)
df[[R1]] = mod1[,c(1,R1)]
mod1 = mod1 %>% filter(!(case > 0 & rest == 0))
}
#' @export
#' @import igraph
mod1 = x
mod2 = x2
mod2 = mod2 %>% arrange(pVal_f) %>% select(virus) %>% unlist %>% as.character()
mod1 = mod1[[3]] %>% select(1,mod2)
df = list()
for(R1 in 2:3){
for(R2 in (R1+1):dim(mod1)[2]){
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
rest = rowSums(select(mod1,-1, -R1))
case = mod1 %>% select(R1)
df[[R1]] = mod1[,c(1,R1)]
mod1 = mod1 %>% filter(!(case > 0 & rest == 0))
}
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
load_all()
for(R2 in (R1+1):dim(mod1)[2]){
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
mod2 = mod2 %>% arrange(pVal_f) %>% select(virus) %>% unlist %>% as.character()
mod1 = mod1[[3]] %>% select(1,mod2)
#' @export
#' @import igraph
mod1 = x
mod2 = x2
mod2 = mod2 %>% arrange(pVal_f) %>% select(virus) %>% unlist %>% as.character()
mod1 = mod1[[3]] %>% select(1,mod2)
df = list()
for(R1 in 2:3){
for(R2 in (R1+1):dim(mod1)[2]){
print(R2)
comp = pairwise_comparator(mod1 %>% select(c(1,R1,R2)),pairwise,dict)
print(comp[[1]])
print(comp[[2]])
if(comp[[1]]<.05 & comp[[2]]<.05){  #if both significant
}
if(comp[[1]]<.05 & comp[[2]]>.05){ # if v_i is significant
index = which(mod1[,..R1] > 0)
mod1[index,R2] = 0
}
if(comp[[1]]>.05 & comp[[2]]<.05){ # if v_j is significant
index = which(mod1[,..R2] > 0)
mod1[index,R1] = 0
}
if(comp[[1]]>.05 & comp[[2]]>.05){ # if neither is significant
}
}
rest = rowSums(select(mod1,-1, -R1))
case = mod1 %>% select(R1)
df[[R1]] = mod1[,c(1,R1)]
mod1 = mod1 %>% filter(!(case > 0 & rest == 0))
}
x
x[[1]]
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
all = filter_avarda(edge = dict,vertex = x[[1]][[1]])
df = data.frame(matrix(ncol = 2,nrow = dim(x[[1]])[2]))
colnames(df) = c("virus","filtered")
R =2
x %>% binary(threshold = 80)
x
x = x[[3]]
x %>% binary(threshold = 80)
all = filter_avarda(edge = dict,vertex = x[[1]][[1]])
df = data.frame(matrix(ncol = 2,nrow = dim(x[[1]])[2]))
colnames(df) = c("virus","filtered")
for(R in 2:dim(x[[1]])[2]){
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0)
df[R,1] = colnames(x[[1]])[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R[[1]])
}
x.R = x %>% binary(threshold = 80)
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0)
df[R,1] = colnames(x[[1]])[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R[[1]])
load_all
load_all()
x = Module_1(data[,1:2],blast,total)
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
load_all()
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
all = filter_avarda(edge = dict,vertex = x[[1]][[1]])
df = data.frame(matrix(ncol = 2,nrow = dim(x[[1]])[2]))
colnames(df) = c("virus","filtered")
for(R in 2:dim(x[[1]])[2]){
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0)
df[R,1] = colnames(x)[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R)
}
x = x[[3]]
all = filter_avarda(edge = dict,vertex = x[[1]][[1]])
df = data.frame(matrix(ncol = 2,nrow = dim(x[[1]])[2]))
load_all
load_all()
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
x[[3]]
all = filter_avarda(edge = dict,vertex = x[[1]])
x[[3]]
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
all = filter_avarda(edge = dict,vertex = x[1])
x= x[[3]]
all = filter_avarda(edge = dict,vertex = x[1])
df = data.frame(matrix(ncol = 2,nrow = dim(x)[2]))
colnames(df) = c("virus","filtered")
for(R in 2:dim(x)[2]){
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0)
df[R,1] = colnames(x)[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R)
}
all = filter_avarda(edge = dict,vertex = x[1])
df = data.frame(matrix(ncol = 2,nrow = dim(x)[2]))
colnames(df) = c("virus","filtered")
View(dict)
View(df)
all = filter_avarda(edge = dict,vertex = x[1])
df = data.frame(matrix(ncol = 2,nrow = dim(x)[2]))
colnames(df) = c("virus","filtered")
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0)
df[R,1] = colnames(x)[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R)
x.R
x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0)
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0) %>% select(1)
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
all = filter_avarda(edge = dict,vertex = x[1])
df = data.frame(matrix(ncol = 2,nrow = dim(x)[2]))
all = filter_avarda(edge = dict,vertex = x[1])
x
x = x[[3]]
all = filter_avarda(edge = dict,vertex = x[1])
df = data.frame(matrix(ncol = 2,nrow = dim(x)[2]))
colnames(df) = c("virus","filtered")
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0) %>% select(1)
df[R,1] = colnames(x)[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R)
for(R in 2:dim(x)[2]){
x.R = x %>% binary(threshold = 80) %>%  filter(.[[R]] > 0) %>% select(1)
df[R,1] = colnames(x)[R]
df[R,2] = filter_avarda(edge = dict,vertex = x.R)
}
df$all_f = all
df = df %>% left_join(total %>% rename(virus = "rowname")) %>% filter(!is.na(virus))
df = df %>% mutate(pVal_f = mapply(bt, df$filtered, df$all_f,df$V1))
df = df %>% left_join(total %>% rename(virus = "rowname")) %>% filter(!is.na(virus))
View(df)
all = filter_avarda(edge = dict,vertex = x[1])
x[1]
load_all()
library(data.table)
library(AVARDA)
library(tidyverse)
blast = fread("~/Desktop/bin2/VirScan_filtered_virus_blast_new.csv")
data = fread("~/Desktop/bin2/AVARDA_test_data.csv")
total = fread("~/Desktop/bin2/total_probability_xr2.csv")
dict = fread("~/Desktop/bin2/my_dict_shortnames.csv")
pairwise = fread("~/Desktop/bin2/unique_probabilities3.csv")
x = Module_1(data[,1:2],blast,total)
x2 = Module_2(x =x[[3]] ,dict = dict,total = total)
knitr::opts_chunk$set(echo = TRUE)
ccp = fread("~/Downloads/CCP serology.csv") %>% filter(`CCP Status` == "(+)")
omega2 = fread("~/omega2.csv")
meta_omega = fread("~/omega3.csv")
pad4 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD4_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`))
pad4 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD4_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`))
pad2 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD2_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`))
colnames(pad2) = paste0("PAD2_",colnames(pad2))
colnames(pad4) = paste0("PAD4_",colnames(pad4))
pad4
pad4 %>% select(PAD4_RA051)
pad4 %>% select(PAD4_RA051) %>% filter(.>=7)
pad4 %>% select(PAD2_RA051) %>% filter(.>=7)
pad2 %>% select(PAD2_RA051) %>% filter(.>=7)
v1 = cbind(pad2 %>% select(PAD2_RA051),pad4 %>% select(PAD4_RA051))
v1 %>% binary(7)
v1
v1[v1<7] = 0
v1[v1>0] = 1
v1
colSums(v1)
v1 %>% binary(7)
v1 %>% binary(7) %>% colSums()
v1 %>% binary(threshold = 7)
v1
colSums(v1)
v1 %>% binary(threshold = 7) %>% colSums()
v1 %>% rowSums()
which(v1 %>% rowSums(), 2)
which(v1 %>% rowSums() == 2)
length(which(v1 %>% rowSums() == 2))
294 - 173
304 - 173
121+131+173
length(which(v1 %>% rowSums() > 0))
v1 = cbind(pad2 %>% select(PAD2_RA051),pad4 %>% select(PAD4_RA051))
v1
v1[v1<7] = 0
v1[v1>0] = 1
colSums(v1)
rowSums(v1) %>% View()
rowSums(v1) >11
summary(rowSums(v1) >1)
summary(rowSums(v1) >2)
summary(rowSums(v1) >0)
306-173
ccp = fread("~/Downloads/CCP serology.csv") %>% dplyr::filter(`CCP Status` == "(+)")
omega2 = fread("~/omega2.csv")
edge = fread("omega_blast_x.csv") %>% select(qseqid,sseqid,evalue) %>% filter(evalue < 1) %>% select(-evalue)
vertex = omega2
nodes = unlist(vertex)
links_filtered = edge %>% filter(qseqid %in% nodes)
links_filtered = links_filtered %>% filter(sseqid %in% nodes)
net <- simplify(as.undirected(graph_from_data_frame(d=links_filtered,vertices=nodes, directed=F) ))
meta_omega = fread("~/omega3.csv")
PAD2.peptides = meta_omega %>% filter(PAD == "PAD2")
PAD4.peptides = meta_omega %>% filter(PAD == "PAD4")
pad4 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD4_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`)) %>% filter(V1 %in% PAD4.peptides$rowname)
pad2 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD2_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`)) %>% filter(V1 %in% PAD2.peptides$rowname)
# colnames(pad2) = paste0("PAD2_",colnames(pad2))
# colnames(pad4) = paste0("PAD4_",colnames(pad4))
V(net)$color <- ifelse((V(net)$name %>% unlist) %in%  PAD2.peptides$rowname, "red", "blue")
x_l = layout.fruchterman.reingold(net)
plot(net,vertex.label=NA,vertex.size = 5,layout = x_l)
-log10(.05)
?scale_color_gradient
ccp = fread("~/Downloads/CCP serology.csv") %>% dplyr::filter(`CCP Status` == "(+)")
omega2 = fread("~/omega2.csv")
omega3 = fread("~/omega3.csv")
pad4 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD4_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`))
pad2 = fread("~/Downloads/OneDrive_1_1-14-2021/Unmod_PAD2_NM_zscores.txt") %>% dplyr::select(c(V1,ccp$`Patient ID`))
colnames(pad2) = paste0("PAD2_",colnames(pad2))
colnames(pad4) = paste0("PAD4_",colnames(pad4))
matrix = cbind(pad2,pad4) %>% as.data.frame() %>% dplyr::select(-PAD4_V1)%>%  filter(  PAD2_V1 %in% (omega2 %>% unlist %>% as.character)) %>%  column_to_rownames("PAD2_V1")
matrix[matrix<7] = 0
matrix[matrix>=7] = 1
matrix2 = matrix %>% rownames_to_column()%>% right_join(omega3)
matrix.3 = cbind(pad2,pad4) %>% as.data.frame() %>% dplyr::select(-PAD4_V1) %>% as.data.frame()
edge = fread("omega_blast_x.csv") %>% select(qseqid,sseqid,evalue) %>% filter(evalue < 1) %>% select(-evalue)
filter_func  = function(edge,vertex){ #independence filter that takes a dictionary (defined above) and a set of nodes and tells the minimal number of unique epitopes
nodes = unlist(vertex)
links_filtered = edge %>% filter(qseqid %in% nodes)
links_filtered = links_filtered %>% filter(sseqid %in% nodes)
if(dim(links_filtered)[1]!=0){
net <- as.undirected(graph_from_data_frame(d=links_filtered,vertices=nodes, directed=F) )
x = decompose.graph(net)
x_1 = x[sapply(x,vcount)<30]
x_1_sum  = sum(unlist(lapply(x_1,independence.number)))
x_2 = x[sapply(x,vcount)>=30]
temp = c()
#x_2 = x
if(length(x_2) >0){
for(R in 1:length(x_2)){
x_2_r = x_2[[R]]
while(max(degree(x_2_r)>5)){
toss = degree(x_2_r)==max(degree(x_2_r))
x_2_r = delete_vertices(x_2_r, V(x_2_r)[toss])
}
x_l = decompose.graph(x_2_r)
temp[R] = sum(unlist(lapply(x_l,independence.number)))
}
}
return(sum(x_1_sum)+sum(temp))
}
if(dim(links_filtered)[1]==0){
return(length(nodes))
}
}
df = data.frame(matrix(nrow = 0,ncol = 7))
colnames(df) = c("ID","PAD2_all","PAD4_all","PAD2_ind","PAD4_ind","PAD2_total","PAD4_total")
for(R in 2:(dim(matrix2)[2]-1)){
name = colnames(matrix2)[R]
sample.R = matrix2[,c(1,R,44)] %>% rename(Sample =name)%>%  filter(Sample ==1)
sample.R.pad2 = sample.R %>% filter(PAD == "PAD2")
sample.R.pad4 = sample.R %>% filter(PAD == "PAD4")
pad2_ind = filter_func(edge,sample.R.pad2$rowname)
pad4_ind = filter_func(edge,sample.R.pad4$rowname)
matrix.3.R = matrix.3  %>% select(name) %>% filter(. >=7)
if(grepl("PAD2",name)){
PAD2_total =  dim(matrix.3.R)[1]
PAD4_total =  0
}
if(grepl("PAD4",name)){
PAD4_total =  dim(matrix.3.R)[1]
PAD2_total =  0
}
df[R-1,] = c(name,dim(sample.R.pad2)[1],dim(sample.R.pad4)[1],pad2_ind,pad4_ind,PAD2_total,PAD4_total)
}
bt <- function(a, b, p = 0.5) {binom.test(a, b, 0.5, alternative=
c("two.sided"), conf.level = 0.95)$p.value}
pad_sum = df %>% mutate(ID.2 = substring(ID,6,10)) %>% select(-ID) %>% group_by(ID.2) %>% summarise_all(max) %>% mutate(across(c(-ID.2), as.numeric)) %>% mutate(all_hits = PAD2_total+PAD4_total) %>% mutate(test = PAD2_ind+PAD4_ind) %>% mutate(test = ifelse(test == 0,1,test))
pad_sum$pVal <- mapply(bt, pad_sum$PAD2_ind, pad_sum$test)
ggplot(pad_sum,aes(x = PAD2_all,y = PAD4_all,size = all_hits,color = log10(pVal)))+geom_point()+theme(text = element_text(size=20))+theme_classic()+scale_size(range = c(0, 10))+ scale_color_gradient2(low = "red", high = "black")
ggplot(pad_sum,aes(x = PAD2_all,y = PAD4_all,size = all_hits,color = -log10(pVal)))+geom_point()+theme(text = element_text(size=20))+theme_classic()+scale_size(range = c(0, 10))+ scale_color_gradient(low = "black", high = "red")
ggplot(pad_sum,aes(x = PAD2_all,y = PAD4_all,size = all_hits,color = -log10(pVal)))+geom_point()+theme(text = element_text(size=20))+theme_classic()+scale_size(range = c(0, 10))+ scale_colour_gradient2(low = "black",mid = "red", high = "red")
ggplot(pad_sum,aes(x = PAD2_all,y = PAD4_all,size = all_hits,color = -log10(pVal)))+geom_point()+theme(text = element_text(size=20))+theme_classic()+scale_size(range = c(0, 10))+ scale_colour_gradient2(low = "black",mid = "red", high = "red" , mid = 1.303)
ggplot(pad_sum,aes(x = PAD2_all,y = PAD4_all,size = all_hits,color = -log10(pVal)))+geom_point()+theme(text = element_text(size=20))+theme_classic()+scale_size(range = c(0, 10))+ scale_colour_gradient2(low = "black",mid = "red", high = "red" , midpoint = 1.303)
ggplot(pad_sum,aes(x = PAD2_all,y = PAD4_all,size = all_hits,color = -log10(pVal)))+geom_point()+theme(text = element_text(size=20))+theme_classic()+scale_size(range = c(0, 10))+ scale_colour_gradient2(low = "black",mid = "red", high = "red" , midpoint = 2.5)
